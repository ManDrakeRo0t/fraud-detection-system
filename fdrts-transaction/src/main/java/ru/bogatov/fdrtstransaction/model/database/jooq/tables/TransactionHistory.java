/*
 * This file is generated by jOOQ.
 */
package ru.bogatov.fdrtstransaction.model.database.jooq.tables;


import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.bogatov.fdrtstransaction.model.database.jooq.Public;
import ru.bogatov.fdrtstransaction.model.database.jooq.tables.records.TransactionHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionHistory extends TableImpl<TransactionHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transaction_history</code>
     */
    public static final TransactionHistory TRANSACTION_HISTORY = new TransactionHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionHistoryRecord> getRecordType() {
        return TransactionHistoryRecord.class;
    }

    /**
     * The column <code>public.transaction_history.id</code>.
     */
    public final TableField<TransactionHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.transaction_history.cc_num</code>.
     */
    public final TableField<TransactionHistoryRecord, String> CC_NUM = createField(DSL.name("cc_num"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.transaction_history.merchant_name</code>.
     */
    public final TableField<TransactionHistoryRecord, String> MERCHANT_NAME = createField(DSL.name("merchant_name"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.transaction_history.date_time</code>.
     */
    public final TableField<TransactionHistoryRecord, String> DATE_TIME = createField(DSL.name("date_time"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.transaction_history.category</code>.
     */
    public final TableField<TransactionHistoryRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.transaction_history.amount</code>.
     */
    public final TableField<TransactionHistoryRecord, Float> AMOUNT = createField(DSL.name("amount"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.transaction_history.trans_num</code>.
     */
    public final TableField<TransactionHistoryRecord, String> TRANS_NUM = createField(DSL.name("trans_num"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.transaction_history.unix_time</code>.
     */
    public final TableField<TransactionHistoryRecord, OffsetDateTime> UNIX_TIME = createField(DSL.name("unix_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.transaction_history.is_fraud</code>.
     */
    public final TableField<TransactionHistoryRecord, Boolean> IS_FRAUD = createField(DSL.name("is_fraud"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.transaction_history.migrated</code>.
     */
    public final TableField<TransactionHistoryRecord, Boolean> MIGRATED = createField(DSL.name("migrated"), SQLDataType.BOOLEAN, this, "");

    private TransactionHistory(Name alias, Table<TransactionHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionHistory(Name alias, Table<TransactionHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transaction_history</code> table reference
     */
    public TransactionHistory(String alias) {
        this(DSL.name(alias), TRANSACTION_HISTORY);
    }

    /**
     * Create an aliased <code>public.transaction_history</code> table reference
     */
    public TransactionHistory(Name alias) {
        this(alias, TRANSACTION_HISTORY);
    }

    /**
     * Create a <code>public.transaction_history</code> table reference
     */
    public TransactionHistory() {
        this(DSL.name("transaction_history"), null);
    }

    public <O extends Record> TransactionHistory(Table<O> child, ForeignKey<O, TransactionHistoryRecord> key) {
        super(child, key, TRANSACTION_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public TransactionHistory as(String alias) {
        return new TransactionHistory(DSL.name(alias), this);
    }

    @Override
    public TransactionHistory as(Name alias) {
        return new TransactionHistory(alias, this);
    }

    @Override
    public TransactionHistory as(Table<?> alias) {
        return new TransactionHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionHistory rename(String name) {
        return new TransactionHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionHistory rename(Name name) {
        return new TransactionHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionHistory rename(Table<?> name) {
        return new TransactionHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, String, String, String, String, Float, String, OffsetDateTime, Boolean, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Float, ? super String, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Float, ? super String, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
