/*
 * This file is generated by jOOQ.
 */
package ru.bogatov.fdrtscore.model.database.jooq.tables;


import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.bogatov.fdrtscore.model.database.jooq.Public;
import ru.bogatov.fdrtscore.model.database.jooq.tables.records.MerchantRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Merchant extends TableImpl<MerchantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.merchant</code>
     */
    public static final Merchant MERCHANT = new Merchant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MerchantRecord> getRecordType() {
        return MerchantRecord.class;
    }

    /**
     * The column <code>public.merchant.id</code>.
     */
    public final TableField<MerchantRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.merchant.name</code>.
     */
    public final TableField<MerchantRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.merchant.lat</code>.
     */
    public final TableField<MerchantRecord, Float> LAT = createField(DSL.name("lat"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.merchant.long</code>.
     */
    public final TableField<MerchantRecord, Float> LONG = createField(DSL.name("long"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.merchant.migrated</code>.
     */
    public final TableField<MerchantRecord, Boolean> MIGRATED = createField(DSL.name("migrated"), SQLDataType.BOOLEAN, this, "");

    private Merchant(Name alias, Table<MerchantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Merchant(Name alias, Table<MerchantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.merchant</code> table reference
     */
    public Merchant(String alias) {
        this(DSL.name(alias), MERCHANT);
    }

    /**
     * Create an aliased <code>public.merchant</code> table reference
     */
    public Merchant(Name alias) {
        this(alias, MERCHANT);
    }

    /**
     * Create a <code>public.merchant</code> table reference
     */
    public Merchant() {
        this(DSL.name("merchant"), null);
    }

    public <O extends Record> Merchant(Table<O> child, ForeignKey<O, MerchantRecord> key) {
        super(child, key, MERCHANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Merchant as(String alias) {
        return new Merchant(DSL.name(alias), this);
    }

    @Override
    public Merchant as(Name alias) {
        return new Merchant(alias, this);
    }

    @Override
    public Merchant as(Table<?> alias) {
        return new Merchant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Merchant rename(String name) {
        return new Merchant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Merchant rename(Name name) {
        return new Merchant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Merchant rename(Table<?> name) {
        return new Merchant(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, Float, Float, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super Float, ? super Float, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super Float, ? super Float, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
