/*
 * This file is generated by jOOQ.
 */
package ru.bogatov.fdrtcore.model.database.jooq.tables;


import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.bogatov.fdrtcore.model.database.jooq.Public;
import ru.bogatov.fdrtcore.model.database.jooq.tables.records.CustomerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>public.customer.id</code>.
     */
    public final TableField<CustomerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.customer.cc_num</code>.
     */
    public final TableField<CustomerRecord, String> CC_NUM = createField(DSL.name("cc_num"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customer.first_name</code>.
     */
    public final TableField<CustomerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.customer.last_name</code>.
     */
    public final TableField<CustomerRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.customer.gender</code>.
     */
    public final TableField<CustomerRecord, Boolean> GENDER = createField(DSL.name("gender"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.customer.birthday</code>.
     */
    public final TableField<CustomerRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.customer.street</code>.
     */
    public final TableField<CustomerRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customer.city</code>.
     */
    public final TableField<CustomerRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customer.state</code>.
     */
    public final TableField<CustomerRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customer.zip</code>.
     */
    public final TableField<CustomerRecord, Integer> ZIP = createField(DSL.name("zip"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customer.job</code>.
     */
    public final TableField<CustomerRecord, String> JOB = createField(DSL.name("job"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.customer.city_pop</code>.
     */
    public final TableField<CustomerRecord, Integer> CITY_POP = createField(DSL.name("city_pop"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.customer.lat</code>.
     */
    public final TableField<CustomerRecord, Float> LAT = createField(DSL.name("lat"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.customer.long</code>.
     */
    public final TableField<CustomerRecord, Float> LONG = createField(DSL.name("long"), SQLDataType.REAL, this, "");

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>public.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    public <O extends Record> Customer(Table<O> child, ForeignKey<O, CustomerRecord> key) {
        super(child, key, CUSTOMER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    @Override
    public Customer as(Table<?> alias) {
        return new Customer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Table<?> name) {
        return new Customer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, String, String, String, Boolean, LocalDate, String, String, String, Integer, String, Integer, Float, Float> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super Integer, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super UUID, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDate, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super Integer, ? super Float, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
